@using Lazcat.Blog.Web.Services.Articles
@using Lazcat.Blog.Models.ViewModel
@inject NavigationManager NavigationManager
@using System.ComponentModel.Design
@using Lazcat.Blog.Models.Web
@inject IArticleService ArticleService

<Row>
    <Col Span="24" Class="border-top-radius-5" >
        <Col Class="border-top-radius-5" Style="background: cornflowerblue">
            <Title Level="3" Class="border-top-radius-5" style="text-align: center; margin: 0;">文章分類</Title>
        </Col>
        @if (_articleDtos == null)
        {
            <Spin></Spin>
        }
        else if (!_articleDtos.Any())
        {
            <Empty></Empty>
        }
        else
        {
            <Menu Theme="MenuTheme.Light" Mode="MenuMode.Inline" Accordion>
                @foreach (var (categoryName, simpleArticles) in _articleDtos)
                {
                <SubMenu Key="@categoryName" TitleTemplate="GetCategoryFragment(categoryName, simpleArticles.Count)">
                    @foreach (var simpleArticle in simpleArticles)
                    {
                        <Tooltip Class="categorylist-menu-item" Style="display: block" Placement="PlacementType.LeftTop" Title="@simpleArticle.Title">
                        <MenuItem OnClick="_=>NavToArticle(simpleArticle.Id)" Class="categorylist-menu-item" Key="@simpleArticle.Id.ToString()">
                            @simpleArticle.Title
                        </MenuItem>
                        </Tooltip>
                    }
                </SubMenu>
                    
                }
            </Menu>
        }
    </Col>
</Row>

<style>
    .border-top-radius-5 {
        border-top-right-radius: 20px; 
        border-top-left-radius: 20px;
    }
    .ant-menu ant-menu-sub > .categorylist-menu-item {
        white-space: nowrap;
        overflow: hidden;
        text-overflow: ellipsis;
        display: block;
        width: 100%;
        display: block
    }
</style>

@code {
    private Dictionary<string, List<SimpleArticle>> _articleDtos;

    protected override async Task OnInitializedAsync()
    {
        var simpleArticles = await ArticleService.GetArticleList(isOnlyPublished:true);
        _articleDtos = simpleArticles.GroupBy(x => x.CategoryName).ToDictionary(x => x.Key, x => x.ToList());
    }

    private RenderFragment GetCategoryFragment(string categoryName, int count)
    {
        return
            @<Tooltip Placement="PlacementType.LeftTop" Title="@categoryName">
                <span>
                    <Icon Type="book" Theme="outline"/>
                    <span style="word-wrap: break-word;">@categoryName</span>
                </span>
            </Tooltip>;
    }

    private void NavToArticle(int simpleArticleId)
    {
        NavigationManager.NavigateTo($"{Define.UrlName.Article}/{simpleArticleId}");
    }

}

