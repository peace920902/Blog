@using Lazcat.Blog.Models.ViewModel
@using Lazcat.Blog.Models.Web
@inject NavigationManager NavigationManager
@inject ModalService ModalService
@inject MessageService MessageService
@inject IArticleService ArticleService
@using Blazorise
@using Lazcat.Blog.Models.Dtos.Articles
@using Lazcat.Blog.Web.Services.Articles
@using ModalClosingEventArgs = AntDesign.ModalClosingEventArgs

<Col Span="24">
    <Blazorise.Card Class="ant-card-hoverable">
        <CardBody @onclick="EditArticle">
            <CardTitle Alignment="TextAlignment.Center" Size="2">@SimpleArticle.Title</CardTitle>
            <CardText>
                @SimpleArticle.Description
            </CardText>
        </CardBody>
        <CardFooter Style="padding: 0">
            <AntDesign.Row>
                <Col Span="8">
                <AntDesign.Button Style="padding: 0;width:100%;" OnClick="EditArticle"><AntDesign.Icon Type="edit"></AntDesign.Icon></AntDesign.Button>
                </Col>
                <Col Span="8">
                <AntDesign.Button Style="padding: 0 ;width:100%;" OnClick="@ShowDeleteArticleConfirm"><AntDesign.Icon  Type="delete" Theme="twotone"></AntDesign.Icon></AntDesign.Button>
                </Col>
                <Col Span="8" Style="background-color: white; border:1px solid transparent">
                    <AntDesign.Switch Checked="SimpleArticle.IsPublished" OnChange="async b=>await PublishArticle(b)">
                        <CheckedChildrenTemplate>
                            <AntDesign.Icon Type="check"></AntDesign.Icon>
                        </CheckedChildrenTemplate>
                        <UnCheckedChildrenTemplate>
                            <AntDesign.Icon Type="close"></AntDesign.Icon>
                        </UnCheckedChildrenTemplate>
                    </AntDesign.Switch>
                </Col>
            </AntDesign.Row>
        </CardFooter>
    </Blazorise.Card>
</Col>




@code {
    [Parameter]
    public SimpleArticle SimpleArticle { get; set; }
    RenderFragment icon =@<AntDesign.Icon Type="exclamation-circle" Theme="outline"></AntDesign.Icon>;

    [Parameter]
    public EventCallback<int> ArticleDeleted { get; set; }


    private async Task DeleteArticle(ModalClosingEventArgs eventArgs)
    {
        var standardOutput = await ArticleService.DeleteArticle(SimpleArticle.Id);
        if (standardOutput.Entity)
        {
            MessageService.Success(standardOutput.Message);
            await ArticleDeleted.InvokeAsync(SimpleArticle.Id);
        }
        else
        {
            MessageService.Error(standardOutput.Message);
        }
    }

    private void EditArticle()
    {
        NavigationManager.NavigateTo($"{Setting.UrlName.Manager}/{Setting.UrlName.Article}/{Setting.UrlName.Edit}/{SimpleArticle.Id}");
    }

    private void ShowDeleteArticleConfirm()
    {
        ModalService.Confirm(new ConfirmOptions()
        {
            Title = "Are you sure delete this Article?",
            Icon = icon,
            OnOk = async (e)=>await DeleteArticle(e),
            OnCancel = _ => Task.CompletedTask,
            OkText = "Yes",
            OkType = "danger",
            CancelText = "No",
        });
    }

    private async Task PublishArticle(bool isPublished)
    {
        var publishArticle = await ArticleService.PublishArticle(new CreateUpdateArticleInput {Id = SimpleArticle.Id, IsPublished = isPublished});
    }
}




